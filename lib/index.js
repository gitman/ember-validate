// Generated by CoffeeScript 1.6.1
var Em, REGEX_EXPRS, get, set;

Em = window.Em;

get = Em.get;

set = Em.set;

REGEX_EXPRS = Em.Object.create({
  email: [/.+@.+\..+/, 'Â¬ wrong email format']
});

module.exports = Em.Mixin.create({
  _isValid: true,
  _errors: {},
  validate: function() {
    var attr, error, isValid, item, that, validations, validators, _i, _len, _ref;
    that = this;
    isValid = true;
    validations = get(that, 'validations');
    for (attr in validations) {
      validators = validations[attr];
      for (_i = 0, _len = validators.length; _i < _len; _i++) {
        item = validators[_i];
        _ref = (function() {
          var error, fn, keys, options, result, __error, _error, _ref, _ref1;
          options = {};
          if (item instanceof Array) {
            _ref = item, item = _ref[0], error = _ref[1];
          }
          if (typeof item === 'string') {
            fn = item;
            options = get(REGEX_EXPRS, "" + fn);
            if (options) {
              fn = 're';
              _ref1 = options, options = _ref1[0], _error = _ref1[1];
            }
          } else if (item instanceof RegExp) {
            fn = 're';
            options = item;
          } else if (typeof item === 'function') {
            fn = item;
          } else {
            keys = Object.keys(item);
            fn = keys[0];
            options = item[fn];
          }
          if (typeof fn === 'string') {
            fn = require("./validators/" + fn);
          }
          result = fn(that, attr, options);
          if (result instanceof Array) {
            isValid = result[0], __error = result[1];
          } else {
            isValid = result;
          }
          if (isValid == null) {
            isValid = true;
          }
          if (error == null) {
            error = _error != null ? _error : _error = __error != null ? __error : __error = '';
          }
          return [isValid, error];
        })(), isValid = _ref[0], error = _ref[1];
        if (isValid === false) {
          set(that, "_errors." + attr, error);
          break;
        } else {
          set(that, "_errors." + attr, void 0);
        }
      }
      if (isValid === false) {
        break;
      }
    }
    return set(that, '_isValid', isValid);
  }
});
