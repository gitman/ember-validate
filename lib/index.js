// Generated by CoffeeScript 1.4.0
var Em, get, set;

Em = window.Em;

get = Em.get;

set = Em.set;

Em.PresenceV = Em.Object.extend({
  msg: "",
  validate: function(obj, attr) {
    var val;
    val = obj.get(attr);
    if (!(val && val.match(/^.+$/mi))) {
      return false;
    }
  }
});

Em.MinV = Em.Object.extend({
  msg: "Short",
  validate: function(obj, attr) {
    var equal, min, val;
    val = obj.get(attr);
    min = this.get("min");
    equal = this.get("equal");
    if (equal && (val.length >= min) === false) {
      return false;
    } else if (val.length < min) {
      return false;
    }
  }
});

Em.MaxV = Em.Object.extend({
  msg: "Long",
  validate: function(obj, attr) {
    var equal, max, val;
    val = obj.get(attr);
    max = this.get("max");
    equal = this.get("equal");
    if (equal && (val.length <= max) === false) {
      return false;
    } else if (val.length > max) {
      return false;
    }
  }
});

Em.RegV = Em.Object.extend({
  msg: "",
  validate: function(obj, attr) {
    var val;
    val = obj.get(attr);
    if (!(val.match(this.get("exp")))) {
      return false;
    }
  }
});

Em.NumV = Em.Object.extend({
  msg: "invalid",
  validate: function(obj, attr) {
    var val;
    val = parseInt(obj.get(attr));
    if (isNaN(val)) {
      return false;
    } else if (this.get("zero") && val === 0) {
      return true;
    } else if (val === 0) {
      return false;
    } else if (this.get("positive") && val < 0) {
      return false;
    } else if (this.get("negative") && val > 0) {
      return false;
    }
  }
});

Em.GmailV = Em.Object.extend({
  msg: "invalid",
  reg: /\S+@gmail.com/
});

Em.V = Em.Mixin.create({
  _errors: Em.Object.create(),
  init: function() {
    var that, _ref;
    this._super();
    that = this;
    return (_ref = this.get("validations")) != null ? _ref.forEach(function(obj) {
      var path;
      path = "_errors." + obj.on;
      return that.set(path, {
        valid: true,
        msg: void 0
      });
    }) : void 0;
  },
  validate: function() {
    var that;
    that = this;
    return this.get("validations").forEach(function(obj) {
      var attr, msg, path, valid, validator;
      attr = obj.on;
      validator = obj.validators.find(function(validator) {
        if (validator.validate(that, attr) === false) {
          return true;
        }
      });
      if (validator) {
        msg = validator.get("msg");
        valid = false;
      } else {
        msg = void 0;
        valid = true;
      }
      path = "_errors." + attr;
      return that.set(path, {
        valid: valid,
        msg: msg
      });
    });
  },
  _isValid: (function() {
    var validator, _errors;
    _errors = this.get("_errors");
    if (_errors) {
      validator = this.get("validations").find(function(obj) {
        var attr;
        attr = obj.on;
        return !!!_errors.get(attr + ".valid");
      });
      if (validator) {
        return false;
      } else {
        return true;
      }
    } else {
      return true;
    }
  }).property("_errors@each.valid").volatile()
});
